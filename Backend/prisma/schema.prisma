// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum TestStatus {
  IN_PROGRESS
  COMPLETED
}

enum TestResultStatus {
  PASSED
  FAILD
  NOT_SUBMITED
}

model User {
  id                      String    @id @default(uuid())
  name                    String
  email                   String    @unique
  password                String
  role                    UserRole  @default(USER)
  isEmailVerified         Boolean   @default(false)
  refreshToken            String?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  passwordResetToken      String?
  passwordResetExpiry     DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
  playlists     Playlist[]
  tests         Test[]
  testResults   UserTestResult[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
  tests             Test[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases        TestCaseResult[]
  userTestResultId String?          @unique
  userTestResult   UserTestResult?  @relation("UserTestResultSubmission", fields: [userTestResultId], references: [id], onDelete: Cascade)
}

model TestCaseResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission       Submission      @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  userTestResultId String?
  userTestResult   UserTestResult? @relation(fields: [userTestResultId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  problems ProblemInPlaylist[]

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

model Test {
  id          String     @id @default(uuid())
  userId      String
  problemId   String
  name        String
  description String
  status      TestStatus @default(IN_PROGRESS)
  starttedAt  DateTime
  completedAt DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  results UserTestResult[]
}

model UserTestResult {
  id          String           @id @default(uuid())
  testId      String
  candidateId String
  isSubmited  Boolean          @default(false)
  status      TestResultStatus @default(NOT_SUBMITED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  test       Test        @relation(fields: [testId], references: [id], onDelete: Cascade)
  candidate  User        @relation(fields: [candidateId], references: [id])
  submission Submission? @relation("UserTestResultSubmission")
  testCases TestCaseResult[]

  @@unique([testId, candidateId])
}